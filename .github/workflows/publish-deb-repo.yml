name: Publish Debian Repository

on:
  workflow_run:
    workflows: ["Build, Scan, Package, Sign, and Release K8s Tools"]
    types:
      - completed
    branches:
      - main
  workflow_dispatch:

jobs:
  publish_repo:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main
          path: main

      - name: Checkout gh-pages branch
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: gh-pages
        continue-on-error: true

      - name: Create gh-pages branch if it doesn't exist
        run: |
          if [ ! -d "gh-pages/.git" ]; then
            echo "Creating new gh-pages branch..."
            mkdir -p gh-pages
            cd gh-pages
            git init
            git checkout -b gh-pages
            git remote add origin https://github.com/${{ github.repository }}.git
            cd ..
          fi

      - name: Install required tools
        run: |
          sudo apt-get update
          sudo apt-get install -y dpkg-dev apt-utils gnupg

      - name: Import and export GPG key
        run: |
          # Import the private key
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --batch --import
          
          # Get the key ID from imported keys
          KEY_ID=$(gpg --list-secret-keys --keyid-format LONG | grep sec | awk '{print $2}' | cut -d'/' -f2)
          echo "Imported key ID: $KEY_ID"
          
          # Export the public key
          if [ -n "$KEY_ID" ]; then
            gpg --armor --export "$KEY_ID" > gh-pages/public_key.asc
            echo "Public key exported successfully"
            echo "Public key size: $(wc -c < gh-pages/public_key.asc) bytes"
            
            # Verify it's a valid key file
            if [ $(wc -c < gh-pages/public_key.asc) -lt 100 ]; then
              echo "ERROR: Public key file too small, something went wrong"
              exit 1
            fi
            
            # Create copies for redundancy
            cp gh-pages/public_key.asc gh-pages/public_key.txt
            cp gh-pages/public_key.asc gh-pages/B24A23CCB7E16E36.asc
          else
            echo "ERROR: No GPG key imported"
            exit 1
          fi

      - name: Create APT repository metadata
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create necessary directories
          mkdir -p gh-pages/dists/stable/main/binary-amd64
          
          # Copy script and create Packages file
          cp main/scripts/create-packages-file.sh .
          chmod +x create-packages-file.sh
          ./create-packages-file.sh "${{ github.repository }}" "gh-pages/dists/stable/main/binary-amd64/Packages"

      - name: Compress Packages file
        run: |
          cd gh-pages
          gzip -9c dists/stable/main/binary-amd64/Packages > dists/stable/main/binary-amd64/Packages.gz

      - name: Create Release file
        run: |
          cd gh-pages/dists/stable
          cat > Release << EOF
          Origin: sansnom-co
          Label: K8s Tools
          Suite: stable
          Codename: stable
          Version: 1.0
          Architectures: amd64
          Components: main
          Description: Statically linked Kubernetes CLI tools
          Date: $(date -Ru)
          EOF
          
          # Add checksums
          echo "MD5Sum:" >> Release
          find main -type f | while read -r file; do
            md5sum "$file" | sed 's|main/|./main/|' >> Release
          done
          
          echo "SHA256:" >> Release
          find main -type f | while read -r file; do
            sha256sum "$file" | sed 's|main/|./main/|' >> Release
          done

      - name: Sign Release file
        run: |
          cd gh-pages/dists/stable
          echo "${{ secrets.GPG_PASSPHRASE }}" | gpg --batch --yes --passphrase-fd 0 --pinentry-mode loopback --detach-sign --armor -o Release.gpg Release
          echo "${{ secrets.GPG_PASSPHRASE }}" | gpg --batch --yes --passphrase-fd 0 --pinentry-mode loopback --clearsign -o InRelease Release

      - name: Create static files
        run: |
          # Copy scripts from main branch
          cp main/scripts/create-repo-index.sh gh-pages/
          cp main/scripts/setup-repo-files.sh gh-pages/
          
          # Run setup in gh-pages directory
          cd gh-pages
          chmod +x *.sh
          ./setup-repo-files.sh
          cd ..

      - name: Create CNAME file
        run: |
          # Only create CNAME if you have a custom domain
          # echo "your-custom-domain.com" > gh-pages/CNAME

      - name: Commit and push to gh-pages
        run: |
          cd gh-pages
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Check what files we have
          echo "Files in repository:"
          ls -la
          echo ""
          echo "Checking for GPG key:"
          ls -la public_key.* || echo "No public key files found!"
          
          # Add all files
          git add -A
          
          # Show what will be committed
          echo "Files to be committed:"
          git status --short
          
          # Commit and push
          git diff --quiet && git diff --staged --quiet || git commit -m "Update Debian repository [skip ci]"
          git push origin gh-pages --force