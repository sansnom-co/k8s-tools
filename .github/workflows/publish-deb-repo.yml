name: Publish Debian Repository

on:
  workflow_run:
    workflows: ["Build, Scan, Package, Sign, and Release K8s Tools"]
    types:
      - completed
    branches:
      - main
  workflow_dispatch:

jobs:
  publish_repo:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main
          path: main

      - name: Checkout gh-pages branch
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: gh-pages
        continue-on-error: true

      - name: Create gh-pages branch if it doesn't exist
        if: failure()
        run: |
          cd gh-pages || mkdir gh-pages
          cd gh-pages
          git init
          git checkout -b gh-pages
          git remote add origin https://github.com/${{ github.repository }}.git

      - name: Install required tools
        run: |
          sudo apt-get update
          sudo apt-get install -y dpkg-dev apt-utils gnupg

      - name: Import GPG key
        run: |
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --batch --import
          # Export public key in the root directory
          echo "${{ secrets.GPG_PASSPHRASE }}" | gpg --batch --yes --passphrase-fd 0 --pinentry-mode loopback --export -a > gh-pages/public_key.asc
          # Also create a copy with .txt extension as a workaround
          cp gh-pages/public_key.asc gh-pages/public_key.txt

      - name: Download all release assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create necessary directories
          mkdir -p gh-pages/pool/main/k/k8s-tools
          mkdir -p gh-pages/dists/stable/main/binary-amd64
          
          # Get all releases and download .deb files
          echo "Downloading all .deb packages from releases..."
          
          gh release list --repo ${{ github.repository }} --limit 100 --json tagName,assets | jq -r '.[] | .assets[] | select(.name | endswith(".deb")) | .url' | while read -r url; do
            filename=$(basename "$url")
            echo "Downloading $filename..."
            wget -q "$url" -O "gh-pages/pool/main/k/k8s-tools/$filename" || echo "Failed to download $filename"
          done
          
          # Also download signature files
          gh release list --repo ${{ github.repository }} --limit 100 --json tagName,assets | jq -r '.[] | .assets[] | select(.name | endswith(".deb.asc")) | .url' | while read -r url; do
            filename=$(basename "$url")
            echo "Downloading signature $filename..."
            wget -q "$url" -O "gh-pages/pool/main/k/k8s-tools/$filename" || echo "Failed to download $filename"
          done

      - name: Generate Packages file
        run: |
          cd gh-pages
          dpkg-scanpackages pool/main /dev/null > dists/stable/main/binary-amd64/Packages
          gzip -9c dists/stable/main/binary-amd64/Packages > dists/stable/main/binary-amd64/Packages.gz

      - name: Create Release file
        run: |
          cd gh-pages/dists/stable
          cat > Release << EOF
          Origin: sansnom-co
          Label: K8s Tools
          Suite: stable
          Codename: stable
          Version: 1.0
          Architectures: amd64
          Components: main
          Description: Statically linked Kubernetes CLI tools
          Date: $(date -Ru)
          EOF
          
          # Add checksums
          echo "MD5Sum:" >> Release
          find main -type f | while read -r file; do
            md5sum "$file" | sed 's|main/|./main/|' >> Release
          done
          
          echo "SHA256:" >> Release
          find main -type f | while read -r file; do
            sha256sum "$file" | sed 's|main/|./main/|' >> Release
          done

      - name: Sign Release file
        run: |
          cd gh-pages/dists/stable
          echo "${{ secrets.GPG_PASSPHRASE }}" | gpg --batch --yes --passphrase-fd 0 --pinentry-mode loopback --detach-sign --armor -o Release.gpg Release
          echo "${{ secrets.GPG_PASSPHRASE }}" | gpg --batch --yes --passphrase-fd 0 --pinentry-mode loopback --clearsign -o InRelease Release

      - name: Create Jekyll configuration
        run: |
          # Create _config.yml for Jekyll with Hacker theme
          cat > gh-pages/_config.yml << 'EOF'
          theme: jekyll-theme-hacker
          title: K8s Tools
          description: Statically linked Kubernetes CLI tools - Debian Repository
          show_downloads: false
          google_analytics:
          # Exclude APT repository files from Jekyll processing
          exclude:
            - pool/
            - dists/
            - public_key.asc
            - Release
            - Release.gpg
            - InRelease
            - Packages
            - Packages.gz
          EOF
          
          # Remove .nojekyll if it exists (we want Jekyll processing now)
          rm -f gh-pages/.nojekyll
          
          # Create index.md (Jekyll will convert this to HTML)
          cat > gh-pages/index.md << 'EOF'
          # K8s Tools Debian Repository
          
          This repository provides Debian packages for statically linked Kubernetes CLI tools. All tools are built from source and statically linked for maximum portability.
          
          ## 🚀 Quick Installation
          
          Add this repository to your Debian/Ubuntu system:
          
          ```bash
          # Add the GPG key
          wget -O- https://sansnom-co.github.io/k8s-tools/public_key.asc | \
            sudo gpg --dearmor -o /usr/share/keyrings/sansnom-k8s-tools.gpg
          
          # Add the repository
          echo "deb [signed-by=/usr/share/keyrings/sansnom-k8s-tools.gpg] \
            https://sansnom-co.github.io/k8s-tools stable main" | \
            sudo tee /etc/apt/sources.list.d/sansnom-k8s-tools.list
          
          # Update and install
          sudo apt update
          sudo apt install k8s-tools
          ```
          
          ## 📦 Included Tools
          
          | Tool | Description | Version |
          |------|-------------|---------|
          | **kubectl** | Kubernetes command-line tool | Latest |
          | **helm** | Kubernetes package manager | Latest |
          | **jq** | Command-line JSON processor | Latest |
          | **skopeo** | Container image inspection and copying | Latest |
          | **oras** | OCI Registry As Storage CLI | Latest |
          | **cosign** | Container signing and verification | Latest |
          | **flux** | GitOps toolkit for Kubernetes | Latest |
          
          ## 🔐 Security
          
          - All packages are GPG signed
          - Binaries are statically linked
          - Built from official upstream sources
          - Automated security scanning with Trivy
          
          ## 📝 Repository Details
          
          - **Suite**: stable
          - **Component**: main
          - **Architecture**: amd64
          - **GPG Key ID**: B24A23CCB7E16E36
          
          ## 🔗 Links
          
          - [GitHub Repository](https://github.com/sansnom-co/k8s-tools)
          - [Releases](https://github.com/sansnom-co/k8s-tools/releases)
          - [GPG Public Key](https://sansnom-co.github.io/k8s-tools/public_key.asc)
          
          ## 📊 Repository Structure
          
          ```
          /
          ├── dists/stable/         # APT metadata
          │   └── main/
          │       └── binary-amd64/
          ├── pool/main/k/k8s-tools/  # Package files
          └── public_key.asc          # GPG public key
          ```
          
          ---
          
          <small>Updated automatically via GitHub Actions</small>
          EOF

      - name: Create CNAME file
        run: |
          # Only create CNAME if you have a custom domain
          # echo "your-custom-domain.com" > gh-pages/CNAME

      - name: Commit and push to gh-pages
        run: |
          cd gh-pages
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git diff --quiet && git diff --staged --quiet || git commit -m "Update Debian repository [skip ci]"
          git push origin gh-pages --force